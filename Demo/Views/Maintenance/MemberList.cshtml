@{
    ViewBag.Title = "Maintenance | Member List";
}


@* @{
    string[] fields = new string[] { "Id", "Name", "Email", "Phone" };
} *@

@Html.Hidden("sort", "", new { form = "f" })
@Html.Hidden("dir", "", new { form = "f" })


@* <form method="post" action="/Maintenance/DeleteManyMembers" id="f">
    <p>
        <button type="button" data-check="ids">Check All</button>
        <button type="button" data-uncheck="ids">Uncheck All</button>
        <button type="submit">Delete Checked</button>
    </p>
 </form> *@
@*     <!-- Pagination Message -->
    <p>
        @Model.Count() of @Model.TotalItemCount record(s) |
        Page @Model.PageNumber of @Model.PageCount
    </p> *@

    <div class="container">
        <!-- AJAX form for search -->
        <form data-ajax="true"
              data-ajax-update="#target"
              data-ajax-loading="#loader"
              id="f">
            <div class="form-group">
                <input type="search" name="name" autofocus value="@ViewBag.Name" placeholder="Search by name" class="form-control" id="name" />
            </div>
        <div class="filter-group">
            <!-- Status dropdown filter -->
            <select name="status" class="filter_status" id="status">
                <option value="All" selected="@(ViewBag.Status == "All")">All</option>
                <option value="Active" selected="@(ViewBag.Status == "Active")">Active</option>
                <option value="Blocked" selected="@(ViewBag.Status == "Blocked")">Blocked</option>
            </select>
        </div>
            <button class="btn btn-primary">Search</button>
            <img src="/photo/images/loader.gif" id="loader" style="display: none" />
        </form>

@*         <!-- Table to display member list -->
        <table class="table" id="target">
            <thead>
                <tr>
                    <th></th>

                    <th>
                        <a asp-action="MemberList" asp-route-sort="FullName" asp-route-dir="@(ViewBag.Sort == "FullName" && ViewBag.Dir == "asc" ? "des" : "asc")">Name</a>
                    </th>
                    <th>Email</th>
                    <th>Phone</th>
                    <th>IC No</th>
                    <th>Action</th> <!-- Action column for Edit and Delete buttons -->
                </tr>
            </thead>
            <tbody>
                @foreach (var member in Model)
                {
                    <tr>
                        <td>
                            <input type="checkbox" name="ids" value="@member.Id" />
                        </td>

                        <td>@member.FirstName @member.LastName</td> <!-- Merged FirstName and LastName -->
                        <td>@member.Email</td>
                        <td>@member.Phone</td>
                        <td>@member.IcNo</td>
                        <td>
                            <!-- Edit and Delete actions -->
                            <a href="@Url.Action("MemberDetails", "Maintenance", new { id = member.Id })" class="btn btn-info btn-sm">Details</a>
                            <a href="@Url.Action("EditMember", "Maintenance", new { id = member.Id })" class="btn btn-warning btn-sm">Edit</a>
                            <form method="post" action="/Maintenance/DeleteMember/@member.Id" style="display:inline;">
                                <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this member member?')">Delete</button>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table> *@

    <div id="target">
        <partial name="_MemberListPartial">
    </div>


@* <!-- Pagination -->
<div class="pagination">
    @Html.PagedListPager(Model, page => Url.Action("MemberList", new { name = ViewBag.Name, sort = ViewBag.Sort, dir = ViewBag.Dir, page }))
</div>
</div> *@

@section foot {
    <!-- Add jQuery if it's not already included -->
@*     <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> *@

        <script>
            let timer = null;

            // Focus at the end of the input field after page load
            document.addEventListener('DOMContentLoaded', function () {
                var input = document.getElementById('name');
                if (input) {
                    input.setSelectionRange(input.value.length, input.value.length); // Set cursor at the end
                    input.focus(); // Focus on the input field
                }
            });

            // Handle input event for the search field
            $('#name').on('input', function (e) {
                clearTimeout(timer); // Clear the previous timeout
                timer = setTimeout(function () {
                    // Submit the form after 500ms delay
                    $(e.target.form).submit();
                }, 500);
            });

            // Check All Button (using event delegation)
            document.addEventListener('DOMContentLoaded', function () {
                document.body.addEventListener('click', function (event) {
                    if (event.target && event.target.getAttribute('data-check') === 'ids') {
                        // Select all checkboxes with name 'ids'
                        document.querySelectorAll('input[name="ids"]').forEach(function (checkbox) {
                            checkbox.checked = true;
                        });
                    }
                });

                // Uncheck All Button (using event delegation)
                document.body.addEventListener('click', function (event) {
                    if (event.target && event.target.getAttribute('data-uncheck') === 'ids') {
                        // Uncheck all checkboxes with name 'ids'
                        document.querySelectorAll('input[name="ids"]').forEach(function (checkbox) {
                            checkbox.checked = false;
                        });
                    }
                });
            });

            // Using event delegation to handle status dropdown change
            document.addEventListener('DOMContentLoaded', function () {
                document.body.addEventListener('change', function (event) {
                    if (event.target && event.target.classList.contains('status-dropdown')) {
                        const memberId = event.target.getAttribute('data-member-id');
                        const newStatus = event.target.value;

                        if (confirm('Are you sure you want to change the member status?')) {
                            fetch(`/Maintenance/UpdateMemberStatus/${memberId}`, { // Pass memberId in URL
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ status: newStatus }) // Send status only
                            })
                            .then(response => {
                                if (response.ok) {
                                    alert('Member status updated successfully.');
                                    location.reload(); // Reload to reflect changes (optional)
                                } else {
                                    alert('Failed to update member status.');
                                }
                            })
                            .catch(error => console.error('Error:', error));
                        } else {
                            // Reset dropdown to the original value if the user cancels
                            event.target.value = event.target.querySelector('option[selected]').value;
                        }
                    }
                });
            });

            // Ensure that the form is submitted when the status dropdown is changed
            document.addEventListener("DOMContentLoaded", function () {
                const statusDropdown = document.getElementById("status");

                statusDropdown.addEventListener("change", function () {
                    // Trigger the form submission when the dropdown value changes
                    this.form.submit();
                });
            });
        </script>


}
